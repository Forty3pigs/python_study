# Функция map() применяет указанную функцию к
# каждому элементу итерируемого объекта и
# возвращает итератор с новыми объектами.

# Нельзя пройтись дважды

lst = [x for x in range(1, 20)]
print(lst)
lst = map(lambda x: x+10, lst)
print(lst)
lst = list(map(lambda x: x+10, lst))
print(lst)

# Функция filter() применяет указанную функцию к
# каждому элементу итерируемого объекта и
# возвращает итератор с теми объектами, для
# которых функция вернула True.

# Нельзя пройтись дважды

lst = [i for i in range(1, 10)]
res = list(filter(lambda i: not i % 2, lst))
print(lst)
print(res)


# Функция zip() применяется к набору итерируемых
# объектов и возвращает итератор с кортежами из
# элементов входных данных.
# Количество элементов в результате равно
# минимальному количеству элементов входного набора

# Количество элементов в результате равно
# минимальному количеству элементов входного набора

# zip ([1, 2, 3], [ ‘о‘, ‘д‘, ‘т‘], [‘f’,’s’,’t’])
#  ↓
# [(1, 'о', 'f'), (2, 'д', 's'), (3, 'т', 't')]

# Нельзя пройтись дважды


users = ['User' + str(i) for i in range(1, 6)]
ids = [5, 12, 31, 46, 7]
data = list(zip(users, ids))
print(data)
salary = [111, 222, 223]
# из-за кол-ва элементов в salary будет обрезка в data
data = list(zip(users, ids, salary))
print(data)


# Функция enumerate() применяется к итерируемому
# объекту и возвращает новый итератор с кортежами
# из индекса и элементов входных данных.

# enumerate(['Казань', 'Смоленск', 'Рыбки', 'Чикаго'])
#  ↓
# [(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')]

# Нельзя пройтись дважды

users = ['User' + str(i) for i in range(1, 6)]
data = list(enumerate(users))
print(data)
